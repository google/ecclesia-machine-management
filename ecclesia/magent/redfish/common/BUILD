# Add a comment just to trigger presubmit PR

licenses(["notice"])

cc_library(
    name = "common",
    srcs = [
        "pcie_device.cc",
        "pcie_device_collection.cc",
        "pcie_function.cc",
        "processor_metrics.cc",
    ],
    hdrs = [
        "memory.h",
        "memory_collection.h",
        "pcie_device.h",
        "pcie_device_collection.h",
        "pcie_function.h",
        "processor.h",
        "processor_collection.h",
        "processor_metrics.h",
        "root.h",
        "service_root.h",
        "session_collection.h",
        "session_service.h",
        "software.h",
        "software_inventory.h",
        "storage_collection.h",
        "system.h",
        "systems.h",
        "thermal.h",
        "update_service.h",
    ],
    visibility = ["//ecclesia:magent_library_users"],
    deps = [
        "//ecclesia/lib/io/pci",
        "//ecclesia/lib/io/pci:config",
        "//ecclesia/lib/io/pci:location",
        "//ecclesia/lib/io/pci:signature",
        "//ecclesia/lib/mcedecoder:cpu_topology",
        "//ecclesia/lib/version",
        "//ecclesia/magent/lib/event_logger:intel_cpu_topology",
        "//ecclesia/magent/lib/event_logger:system_event_visitors",
        "//ecclesia/magent/lib/event_logger/indus:indus_system_event_visitors",
        "//ecclesia/magent/redfish/core:redfish_core",
        "//ecclesia/magent/sysmodel/x86:cpu",
        "//ecclesia/magent/sysmodel/x86:dimm",
        "//ecclesia/magent/sysmodel/x86:thermal",
        "//ecclesia/magent/sysmodel/x86:x86_sysmodel",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/server/public:http_server_api",
        "@com_googlesource_code_re2//:re2",
        "@com_jsoncpp//:json",
    ],
)

cc_test(
    name = "service_root_test",
    srcs = ["service_root_test.cc"],
    data = [
        ":test_data/service_root.json",
    ],
    deps = [
        ":common",
        "//ecclesia/lib/file:test_filesystem",
        "//ecclesia/lib/network:testing",
        "//ecclesia/lib/redfish:interface",
        "//ecclesia/lib/redfish:raw",
        "//ecclesia/magent/lib/thread_pool",
        "//ecclesia/magent/redfish/core:redfish_core",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/client/public:http_client",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/client/public:http_client_api",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/server/public:http_server",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/server/public:http_server_api",
        "@com_jsoncpp//:json",
    ],
)

cc_test(
    name = "session_collection_test",
    srcs = ["session_collection_test.cc"],
    data = [
        ":test_data/session_collection.json",
    ],
    deps = [
        ":common",
        "//ecclesia/lib/apifs",
        "//ecclesia/lib/file:test_filesystem",
        "//ecclesia/lib/network:testing",
        "//ecclesia/lib/redfish:raw",
        "//ecclesia/magent/lib/thread_pool",
        "//ecclesia/magent/redfish/core:redfish_core",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/client/public:http_client",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/client/public:http_client_api",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/server/public:http_server",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/server/public:http_server_api",
        "@com_googlesource_code_re2//:re2",
        "@com_jsoncpp//:json",
    ],
)

cc_test(
    name = "session_service_test",
    srcs = ["session_service_test.cc"],
    data = [
        ":test_data/session_service.json",
    ],
    deps = [
        ":common",
        "//ecclesia/lib/apifs",
        "//ecclesia/lib/file:test_filesystem",
        "//ecclesia/lib/network:testing",
        "//ecclesia/lib/redfish:interface",
        "//ecclesia/lib/redfish:raw",
        "//ecclesia/magent/lib/thread_pool",
        "//ecclesia/magent/redfish/core:redfish_core",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/client/public:http_client",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/client/public:http_client_api",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/server/public:http_server",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/server/public:http_server_api",
        "@com_jsoncpp//:json",
    ],
)
