"""Rule for collating redpath queries and query rules into a single unit"""

def _camel_case(s):
    """Given xxx_yyy_zzz return XxxYyyZzz."""
    ret = ""
    for c in s.split("_"):
        ret += c.capitalize()
    return ret

def _get_file_location_str(q):
    """Given a list of file paths returns a comma separated location string to be used in cmd"""
    location = ["$(location %s)" % filename for filename in q]
    return ",".join(location)

def redpath_query(name, cc_namespace, queries, query_rules = [], visibility = None, generator = "//ecclesia/lib/redfish/dellicius/query:query_spec_generator"):
    """Helper function for combining redpath queries and query rules into a single unit

    Two cc_libraries will be generated by this rule that exports an array containing
    embedded data from all of the queries and query_rules. This library will generate <name>.h and
    <name>.cc containing the queries and query rules.

    Args:
      name: Prefix for the cc_libraries generated.
      cc_namespace: namespace to be used for the generated header and .cc files.
      queries: list of query textprotos to be embedded into a cc_library.
      query_rules: list of query rule textprotos to be embedded into a cc_library.
      visibility: The visibility of the generated cc_libraries.
      generator: the generator used to make the query context
    """

    camel_case_name = _camel_case(name)

    native.filegroup(
        name = name + "__query_filegroup",
        srcs = queries,
    )
    srcs = [":" + name + "__query_filegroup"]

    cmd_suffix = ""
    if len(query_rules) != 0:
        native.filegroup(
            name = name + "__query_rule_filegroup",
            srcs = query_rules,
        )
        srcs.append(":" + name + "__query_rule_filegroup")
        cmd_suffix = "--query_rules %s" % _get_file_location_str(query_rules)

    native.genrule(
        name = name + "__generator",
        srcs = queries + query_rules + srcs,
        outs = [name + ".cc", name + ".h"],
        cmd = ("$(location %s) --name=%s --output_dir=\"$(@D)\" --header_path=\"%s\" --namespace=%s --query_files %s %s") %
              (generator, camel_case_name, native.package_name(), cc_namespace, _get_file_location_str(queries), cmd_suffix),
        tools = [generator],
    )

    native.cc_library(
        name = name,
        srcs = [name + ".cc"],
        hdrs = [name + ".h"],
        tags = ["__query_spec:%s;%s;%s.h" % (cc_namespace, camel_case_name, name)],
        deps = [
            "@com_google_absl//absl/container:flat_hash_set",
            "//ecclesia/lib/file:cc_embed_interface",
            "//ecclesia/lib/redfish/dellicius/engine:query_engine_cc",
            "//ecclesia/lib/time:clock",
        ],
        visibility = visibility,
    )
