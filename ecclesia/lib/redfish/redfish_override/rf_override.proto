/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package ecclesia;

import "google/protobuf/struct.proto";

// There are two kinds of way to identify a Object inside a redfish json:
// 1. Directly pointing out the field name. This is use in most situation where
// we want to have the value of a field key
// 2. Give the field key and value to find the actual json object in an array.
// Since there's no keys for array element, we need to specify a [key:value] set
// to find the actual element.
// For the part that is using ObjectIdentifier will mostly be using multiple
// identifier since many Object will be inside a nested Json object. In order to
// get to the actual target, we may need to walk through multiple levels of json
// object. For example "TestJson": { "Level1": { "Level2" : 100} }, in order to
// get to Level2, we'll need 3 Identifier: "TestJson", "Level1" and "Level2".
message ObjectIdentifier {
  message IndividualObjectIdentifier {
    message ArrayField {
      string field_name = 1;
      google.protobuf.Value value = 2;
    }
    oneof FieldType {
      string field_name = 1;
      ArrayField array_field = 2;
      int64 array_idx = 3;
    }
  }
  repeated IndividualObjectIdentifier individual_object_identifier = 1;
}

// Listing what content is needed to override in a uri, with three different
// override method
message OverrideField {
  // In order to override a value, we have two ways to specify it. One is to
  // give a hardcode value directly and the other is to get the value from a
  // reading of another uri
  message OverrideValue {
    message OverrideByReading {
      string uri = 1;
      ObjectIdentifier object_identifier = 2;
    }
    oneof Values {
      google.protobuf.Value value = 1;
      OverrideByReading override_by_reading = 2;
    }
  }
  message ActionReplace {
    ObjectIdentifier object_identifier = 1;
    OverrideValue override_value = 2;
  }
  message ActionAdd {
    ObjectIdentifier object_identifier = 1;
    OverrideValue override_value = 2;
  }
  message ActionClear {
    ObjectIdentifier object_identifier = 1;
  }
  oneof Action {
    ActionReplace action_replace = 1;
    ActionAdd action_add = 2;
    ActionClear action_clear = 3;
  }
  message ApplyCondition {
    // This boolean specifies if this override only applies when expand is used.
    // If true, then the override policy will applied only when expand is used.
    bool is_expand = 1;
  }
  ApplyCondition apply_condition = 4;
}

// In the override_content_map, the key will be the uri that needs to be
// override and the value contains all override contents
message OverridePolicy {
  message OverrideContent {
    repeated OverrideField override_field = 2;
  }
  map<string, OverrideContent> override_content_map_uri = 1;
  map<string, OverrideContent> override_content_map_regex = 2;
}
