syntax = "proto3";

package ecclesia;

// Message encapsulating Redfish server input to a Query format.
message DelliciusQuery {
  // Smallest unit of operation, targeting specific set of resources
  message Subquery {
    // A RedPath level freshness configuration used to indicate the desired
    // Redfish object freshness when processing a RedPath prefix. The cache
    // policy is determined by the cache implementation; this property merely
    // indicates whether a cached value is acceptable.
    // Usage:
    //  OPTIONAL:- Freshness is not required. Cached objects are OK.
    //  REQUIRED:- Freshness is required.
    enum Freshness {
      UNSPECIFIED = 0;
      OPTIONAL = 1;
      REQUIRED = 2;
    }
    // Identifies redfish property to parse along with .
    message RedfishProperty {
      // Refers to the Type of property element in the Redfish spec:
      // https://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.19.0.pdf#page=130
      enum PropertyElementType {
        UNSPECIFIED = 0;
        PRIMITIVE = 1;
        COLLECTION_PRIMITIVE = 2;
      }
      enum PrimitiveType {
        UNDEFINED = 0;
        BOOLEAN = 1;
        INT64 = 2;
        STRING = 3;
        DOUBLE = 4;
        DATE_TIME_OFFSET = 5;
      }

      string property = 1;
      // Named attribute to which queried property in response data is mapped.
      string name = 2;
      PrimitiveType type = 3;
      PropertyElementType property_element_type = 4;
      bool nullable = 5;
      // If specified, query engine will collect all values for this property
      // across all resources queried and store them in
      // QueryResult.collected_properties map with collect_as as key. If
      // multiple subqueries use the same collect_as key, all properties will be
      // collected in the same list.
      string collect_as = 6;
    }
    // Uniquely identifies the subquery. It is the responsibility of client
    // application to use a unique string else the subquery output will be
    // bundled together. Query engine processes the subqueries irrespective of
    // the subquery id and it is only at the time of aggregating the output or
    // caching the leaf nodes is when query engine uses the subquery id.
    string subquery_id = 1;
    // Identifies root subquery ids to group related data in a root subquery
    // response.
    repeated string root_subquery_ids = 4;
    // Identifies parent subquery sets. The output of this subquery will be
    // associated with each subquery output in the set.
    repeated string root_subquery_set_ids = 5;
    oneof resource {
      // RedPath of the Redfish resource to query relative to Redfish Service
      // root or relative to RedPath in different subquery as identified by root
      // field in this proto.
      string redpath = 2;
      // A uri reference is a nested node that is not a navigational
      // resource and hence is not a regular redpath. It points to a URI that
      // gives additional information about a resource. Once the reference
      // is resolved, the URI is fetched and used to process the subquery.
      string uri_reference_redpath = 10;
      // Absolute uri served by the Redfish service.
      string uri = 11;
    }
    Freshness freshness = 7;
    repeated RedfishProperty properties = 3;

    message RawData {
      enum Type {
        NONE = 0;
        BYTES = 1;
        STRING = 2;
      }
      Type type = 1;
    }

    oneof verbs {
      // TODO (Malini): Make properties mutually exclusive to fetch_raw_data
      // GET raw data
      RawData fetch_raw_data = 13;
    }

    // Identifies property sets.
    repeated string property_set_ids = 6;
    // Limit query result size
    optional int32 max_size_in_bytes = 8;
  }
  // A subquery set allows grouping subqueries to execute a common operation.
  // For example, this allows having different subqueries share a common group
  // of root_subquery_ids.
  message SubquerySet {
    string set_id = 1;
    repeated string subquery_ids = 2;
  }
  // A property set contains Redfish properties to be queried in the subquery
  // scope the set is included. This allows a set of properties to be reused
  // across subqueries.
  message PropertySet {
    string set_id = 1;
    repeated Subquery.RedfishProperty properties = 2;
  }

  // A unique name for identifying this platform-related query.
  string query_id = 1;
  repeated Subquery subquery = 2;
  repeated SubquerySet subquery_sets = 3;
  repeated PropertySet property_sets = 4;

  // Indicates the service root the query executes relative to, Defaults to
  // redfish/v1.
  optional string service_root = 9;
}
