syntax = "proto3";

package ecclesia;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "google/protobuf/descriptor.proto";
import "ecclesia/lib/redfish/dellicius/query/query_errors.proto";
import "ecclesia/lib/redfish/transport/transport_metrics.proto";

// Encapsulates subset of redfish properties and devpath obtained from a redfish
// resource.
message SubqueryDataSet {
  message Property {
    // Named attribute to which queried property in response data is mapped.
    // By default, name of the queried property is set if the client
    // application does not explicitly provide a name to map the queried
    // property to within a subquery.
    string name = 1;
    oneof value {
      string string_value = 3;
      double double_value = 4;
      int64 int64_value = 5;
      bool boolean_value = 6;
      google.protobuf.Timestamp timestamp_value = 7;
    }

    message PropertyValue {
      oneof value {
        string string_value = 1;
        double double_value = 2;
        int64 int64_value = 3;
        bool boolean_value = 4;
        google.protobuf.Timestamp timestamp_value = 5;
      }
    }
    message PropertyCollection {
      repeated PropertyValue values = 1;
    }
    oneof property_value {
      PropertyValue primitive_value = 8;
      PropertyCollection collection_value = 9;
    }
  }

  message RawData {
    oneof value {
      string string_value = 3;  // base64 encoded string
      bytes bytes_value = 4;
    }
  }

  // Redfish properties identifying the location of a resource.
  message RedfishLocation {
    string service_label = 1 [(query_options) = {
      // QueryEngine adds additional properties to the subquery for internal
      // use. To differentiate internal properties from user specified ones, the
      // label is created with trailing and leading underscores.
      label: "__ServiceLabel__",
      // A resource can either have PhysicalLocation or Location but not both.
      // Therefore, only one property from the set below will be mapped to the
      // label.
      properties: [
        "Location.PartLocation.ServiceLabel",
        "PhysicalLocation.PartLocation.ServiceLabel",
        "Oem.Google.LocationContext.ServiceLabel"
      ]
    }];
    string part_location_context = 2 [(query_options) = {
      label: "__PartLocationContext__",
      properties: [
        "Location.PartLocationContext",
        "PhysicalLocation.PartLocationContext",
        "Oem.Google.LocationContext.PartLocationContext"
      ]
    }];
    repeated string embedded_location_context = 3 [(query_options) = {
      label: "__EmbeddedLocationContext__",
      properties: [ "Oem.Google.LocationContext.EmbeddedLocationContext" ]
    }];
  }

  // Local devpath
  optional string devpath = 1 [(query_options) = {
    // The field option serves the purpose of hinting query engine about the
    // Redfish property that can be parsed, if populated, to get local devpath.
    label: "__LocalDevpath__",
    properties: [
      "Location.Oem.Google.Devpath",
      "PhysicalLocation.Oem.Google.Devpath",
      "Oem.Google.LocationContext.Devpath"
    ]
  }];
  // Redfish properties queried.
  repeated Property properties = 2;
  // raw data of the queried property
  optional RawData raw_data = 6;

  // Maps child subquery id to its associated subquery response data.
  // An important construct to group datasets of different subqueries under
  // parent subquery.
  map<string, SubqueryOutput> child_subquery_output_by_id = 3;
  oneof stable_id {
    RedfishLocation redfish_location = 4;
  }
  optional string uri_annotation = 7;

  // Decorator extensions - these properties are not provided by the
  // RedfishQueryEngine but are rather populated by optional supplemental
  // libraries which independently mutate the SubqueryDataSet.
  message DecoratorExtensions {
    // Any extension provided by a decorator library.
    repeated google.protobuf.Any extension = 1;

    // Very common extensions can be defined below as first-class members.
    // The criteria for first-class support are:
    // * usage by high-throughput applications

    // Machine barepath.
    optional string machine_devpath = 2;
    // Sub-Fru Embedded Location Context
    optional string embedded_location_context = 3;
  }
  DecoratorExtensions decorators = 5;
}

message SubqueryOutput {
  // Describes the status of Subquery abstracting away transport specifics.
  optional google.rpc.Status status = 1;
  // Normalised data per subquery based on data model defined in the subquery
  repeated SubqueryDataSet data_sets = 2;
}

// Message encapsulating Query result
message DelliciusQueryResult {
  // Identifies the parent query the subquery data associates with.
  string query_id = 1;
  // Maps subquery id to associated subquery response data.
  map<string, SubqueryOutput> subquery_output_by_id = 2;
  // Represents point in time when Dellicius Queries are received by QueryEngine
  google.protobuf.Timestamp start_timestamp = 3;
  // Represents point in time when output for last Dellicus Query is processed.
  google.protobuf.Timestamp end_timestamp = 4;
  // Describes the status of the QueryResult as a whole.
  optional google.rpc.Status status = 5;
  // Summary of the errors that occurred in the subqueries.
  optional QueryErrors query_errors = 6;
  // Metrics collected with MetricalRedfishTransport, if used.
  optional RedfishMetrics redfish_metrics = 7;
}

// Field options used to annotate properties in a subquery output.
message QueryOptions {
  // Labels one of the properties in |properties| field.
  string label = 1;
  // Lists all aliases for a Redfish Property.
  // Example:
  //  {"Location.PartLocationContext", "PhysicalLocation.PartLocationContext"}
  //  Both properties in the array above represent PartLocationContext.
  repeated string properties = 2;
}

extend google.protobuf.FieldOptions {
  optional QueryOptions query_options = 510245235;
}
