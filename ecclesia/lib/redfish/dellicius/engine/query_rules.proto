syntax = "proto3";

package ecclesia;

// Encapsulates dispatch rules applicable to a RedPath.
// This houses Redfish Query Parameters identified for RedPath nodes as well as
// any metadata necessary for effectively dispatching a RedPath Query.
message RedPathPrefixWithQueryParams {
  message ExpandConfiguration {
    enum ExpandType {
      UNDEFINED = 0;
      NO_LINKS = 1;
      ONLY_LINKS = 2;
      BOTH = 3;
    }
    uint64 level = 1;
    ExpandType type = 2;
  }
  message TopConfiguration {
    uint64 num_members = 1;
  }

  // RedPath prefix.
  // This is an absolute RedPath expression (Relative to service root).
  // Predicate specific rules are not supported.
  // User should use `[*]` predicate.
  string redpath = 1;
  optional ExpandConfiguration expand_configuration = 2;
  optional TopConfiguration top_configuration = 3;
  bool filter_enabled = 4;
  bool subscribe = 5;
  // Sets a custom uri prefix to work with different service roots where an
  // implementation has URIs relative to standard service root but makes the
  // data available using a custom root.
  // E.g if an implementation has uri /redfish/v1/Chassis,
  // but makes it avaialble through <CustomPrefix>/redfish/v1/Chassis.
  // This prefix will instruct query engine to prepend the URIs with the given
  // `uri_prefix` value before sending out the request.
  string uri_prefix = 6;
}

// Collection of Prefix Set with QueryParams.
// This descriptor is mainly used for tuning a prefix set for performance.
message RedPathPrefixSetWithQueryParamsCollection {
  repeated QueryRules.RedPathPrefixSetWithQueryParams
      redpath_prefix_set_with_params = 1;
}

// Message encapsulating RedPath query execution rules for one or more queries.
message QueryRules {
  // Collection of absolute RedPath prefixes along with rules - Expand, Filter,
  // Top, Subscribe etc.
  // A Redpath query consists of one or more subqueries each having either a
  // `relative` RedPath Expression (executed relative to a another expression)
  // or an `absolute` RedPath expression (executed relative to service root).
  //
  // In this message, the user provides rules for all the `absolute` RedPath
  // prefixes that are expected to be executed by QueryEngine.
  //
  // Note: User shall not configure a rule for specific predicate. This is
  // because for Redfish Resource Collection, QueryEngine applies rules to all
  // members in the collection and not to specific instance. Hence it is advised
  // to replace all predicate in RedPath prefix with `[*]` when writing rules.
  // Example:
  //  /Chassis[Name=Indus] shall be configured as /Chassis[*] in QueryRules.
  message RedPathPrefixSetWithQueryParams {
    repeated RedPathPrefixWithQueryParams redpath_prefix_with_params = 1;
  }
  // Maps Unique Query Identifier to tuned Redfish Query Param configuration.
  map<string, RedPathPrefixSetWithQueryParams> query_id_to_params_rule = 1;
}
