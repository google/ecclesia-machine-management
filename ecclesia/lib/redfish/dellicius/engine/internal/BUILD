# load("@rules_cc//cc:cc_library.bzl", "cc_library")
# load("@rules_cc//cc:cc_test.bzl", "cc_test")

licenses(["notice"])

cc_library(
    name = "interface",
    hdrs = ["interface.h"],
    visibility = [
        "//ecclesia/lib/redfish:__subpackages__",
        "//ecclesia/redfish/dellicius:__subpackages__",
        "//platforms/gbmc/mtest:__subpackages__",
        "//platforms/redfish/lib/query_engine:__subpackages__",
    ],
    deps = [
        "//ecclesia/lib/redfish:interface",
        "//ecclesia/lib/redfish:node_topology",
        "//ecclesia/lib/redfish/dellicius/query:query_cc_proto",
        "//ecclesia/lib/redfish/dellicius/query:query_result_cc_proto",
        "//ecclesia/lib/redfish/dellicius/query:query_variables_cc_proto",
        "//ecclesia/lib/status:macros",
        "//ecclesia/lib/time:clock",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/functional:function_ref",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "normalizer",
    srcs = ["normalizer.cc"],
    hdrs = ["normalizer.h"],
    visibility = [
        "//ecclesia/lib/redfish/dellicius:__subpackages__",
        "//platforms/gsys/daemon/redfish_server:__subpackages__",
    ],
    deps = [
        ":interface",
        "//ecclesia/lib/redfish:devpath",
        "//ecclesia/lib/redfish:interface",
        "//ecclesia/lib/redfish:node_topology",
        "//ecclesia/lib/redfish/dellicius/query:query_cc_proto",
        "//ecclesia/lib/redfish/dellicius/query:query_result_cc_proto",
        "//ecclesia/lib/redfish/dellicius/utils:id_assigner",
        "//ecclesia/lib/redfish/dellicius/utils:path_util",
        "//ecclesia/lib/status:macros",
        "//ecclesia/lib/time:proto",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@com_google_googleapis//google/rpc:code_cc_proto",
        "@com_google_googleapis//google/rpc:status_cc_proto",
        "@com_google_protobuf//:protobuf",
        "@com_json//:json",
    ],
)

cc_library(
    name = "query_planner",
    srcs = ["query_planner.cc"],
    hdrs = ["query_planner.h"],
    visibility = [
        "//ecclesia/lib/redfish/dellicius:__subpackages__",
        "//platforms/redfish/lib/query_engine:__subpackages__",
    ],
    deps = [
        ":interface",
        "//ecclesia/lib/redfish:interface",
        "//ecclesia/lib/redfish/dellicius/query:query_cc_proto",
        "//ecclesia/lib/redfish/dellicius/query:query_errors_cc_proto",
        "//ecclesia/lib/redfish/dellicius/query:query_result_cc_proto",
        "//ecclesia/lib/redfish/dellicius/query:query_variables_cc_proto",
        "//ecclesia/lib/redfish/dellicius/utils:join",
        "//ecclesia/lib/redfish/dellicius/utils:path_util",
        "//ecclesia/lib/redfish/redpath/definitions/query_predicates:filter",
        "//ecclesia/lib/redfish/redpath/definitions/query_predicates:predicates",
        "//ecclesia/lib/redfish/transport:interface",
        "//ecclesia/lib/redfish/transport:transport_metrics_cc_proto",
        "//ecclesia/lib/status:macros",
        "//ecclesia/lib/time:clock",
        "//ecclesia/lib/time:proto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:btree",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/functional:function_ref",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/time",
        "@com_google_googleapis//google/rpc:code_cc_proto",
        "@com_google_googleapis//google/rpc:status_cc_proto",
        "@com_googlesource_code_re2//:re2",
        "@com_json//:json",
    ],
)

cc_library(
    name = "passkey",
    hdrs = ["passkey.h"],
    # We tightly control this visibility for the passkey factory. New clients using the raw RedfishInterface pointer need to add themselves to the redfish_query_engine_raw_intf_users package group.
    visibility = ["//ecclesia:redfish_query_engine_raw_intf_users"],
)

cc_test(
    name = "query_planner_test",
    srcs = ["query_planner_test.cc"],
    data = [
        "//ecclesia/lib/redfish/dellicius/query/samples:sample_malformed_queries_in",
        "//ecclesia/lib/redfish/dellicius/query/samples:sample_queries_in",
        "//ecclesia/lib/redfish/dellicius/query/samples:sample_queries_out",
        "//ecclesia/redfish_mockups/indus_hmb_cn:mockup.shar",
        "//ecclesia/redfish_mockups/indus_hmb_shim:mockup.shar",
    ],
    deps = [
        ":interface",
        ":query_planner",
        "//ecclesia/lib/file:path",
        "//ecclesia/lib/file:test_filesystem",
        "//ecclesia/lib/protobuf:parse",
        "//ecclesia/lib/redfish:interface",
        "//ecclesia/lib/redfish:topology",
        "//ecclesia/lib/redfish/dellicius/engine:factory",
        "//ecclesia/lib/redfish/dellicius/query:query_cc_proto",
        "//ecclesia/lib/redfish/dellicius/query:query_errors_cc_proto",
        "//ecclesia/lib/redfish/dellicius/query:query_result_cc_proto",
        "//ecclesia/lib/redfish/dellicius/utils:id_assigner",
        "//ecclesia/lib/redfish/dellicius/utils:id_assigner_devpath",
        "//ecclesia/lib/redfish/testing:fake_redfish_server",
        "//ecclesia/lib/redfish/transport:cache",
        "//ecclesia/lib/redfish/transport:http_redfish_intf",
        "//ecclesia/lib/redfish/transport:interface",
        "//ecclesia/lib/redfish/transport:metrical_transport",
        "//ecclesia/lib/redfish/transport:transport_metrics_cc_proto",
        "//ecclesia/lib/testing:proto",
        "//ecclesia/lib/time:clock",
        "//ecclesia/lib/time:clock_fake",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/functional:function_ref",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@com_google_googleapis//google/rpc:code_cc_proto",
        "@com_google_googletest//:gtest_main",
        "@com_google_tensorflow_serving//tensorflow_serving/util/net_http/public:shared_files",
        "@com_json//:json",
    ],
)
