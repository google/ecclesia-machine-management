syntax = "proto3";

package ecclesia;

import "google/protobuf/duration.proto";
import "ecclesia/lib/redfish/dellicius/engine/query_rules.proto";
import "ecclesia/lib/redfish/dellicius/query/query.proto";
import "ecclesia/lib/redfish/redpath/definitions/query_engine/query_engine_features.proto";
import "ecclesia/lib/redfish/redpath/definitions/query_result/query_result_verification.proto";

message QueryAndRulePath {
  string query_path = 1;
  string rule_path = 2;
}

message QueryAndRule {
  ecclesia.DelliciusQuery query = 1;
  ecclesia.QueryRules.RedPathPrefixSetWithQueryParams rule = 2;
}

message VerificationConfig {
  oneof verification_config {
    string path = 1;
    QueryResultVerification config = 2;
  }
}

message SelectionSpec {
  message SelectionClass {
    enum ServerType {
      SERVER_TYPE_UNSPECIFIED = 0;
      SERVER_TYPE_BMCWEB = 1;

      reserved 2 to 99;
    }

    enum ServerClass {
      SERVER_CLASS_UNSPECIFIED = 0;
      // Nodes in the Compute Arena
      SERVER_CLASS_COMPUTE = 1;
      reserved 2 to 99;
    }

    // We recommend setting either server_type or server_tag. If both are set,
    // AND operation will be applied and the query will execute only on those
    // nodes that satisfy both the criteria and miss the nodes that satisfy one
    // or the other.
    optional ServerType server_type = 1;
    repeated string server_tag = 2;
    // We also support the concept of a "server class". This is a more general
    // concept than a server tag, and allows us to select a group of servers of
    // the same class. Please note that this field can be set instead of
    // server_type and/or server_tag fields. The AND operation still applies; if
    // all are set, all server criteria must be met. Ideally, this field can be
    // used in conjection with server_tag to select a specific server within a
    // class.
    repeated ServerClass server_class = 3;
  }

  message QuerySelectionSpec {
    repeated SelectionClass select = 1;
    oneof query_spec {
      QueryAndRulePath query_and_rule_path = 2;
      QueryAndRule query_and_rule = 3;
    }
    google.protobuf.Duration timeout = 4;
    reserved 5;
    VerificationConfig verification_config = 6;
    reserved 7;
  }

  repeated QuerySelectionSpec query_selection_specs = 1;
}

message ServerInfo {
  string server_tag = 1;
  SelectionSpec.SelectionClass.ServerType server_type = 2;
  SelectionSpec.SelectionClass.ServerClass server_class = 3;
}

enum QueryPattern {
  PATTERN_UNSPECIFIED = 0;
  // All queries will be executed in series across all agents
  PATTERN_SERIAL_ALL = 1;
  // All queries will be executed in series for an agent, but queries across
  // agents are exectued in parallel
  PATTERN_SERIAL_AGENT = 2;
  // All queries will be executed in parallel across all agents
  PATTERN_PARALLEL_ALL = 3;
}

message QueryRouterSpec {
  // map of query id to selection spec.
  map<string, SelectionSpec> selection_specs = 1;
  // Set of feature flags that will be applied to all query engine instances in
  // the router.
  QueryEngineFeatures features = 2;
  // Duration of Timebased cache. Value of 0 signifies NullCache
  int64 cache_duration_ms = 3;
  // Pattern for issuing the query to all the query engine instances
  QueryPattern query_pattern = 4;

  reserved 5;

  // Specifies the maximum number of concurrent threads when using query
  // patterns PATTERN_SERIAL_AGENT or PATTERN_PARALLEL_ALL. For
  // PATTERN_SERIAL_ALL, this value has no effect.
  int32 max_concurrent_threads = 6;

  message StableIdConfig {
    // Specifies the devpath policy for the underlying QueryEngines
    enum StableIdType {
      STABLE_ID_UNSPECIFIED = 0;
      STABLE_ID_NONE = 1;
      STABLE_ID_REDFISH_LOCATION = 2;
      STABLE_ID_TOPOLOGY_DERIVED = 3;
    }
    message Policy {
      SelectionSpec.SelectionClass select = 1;
      StableIdType stable_id_type = 2;
    }
    repeated Policy policies = 1;
  }
  StableIdConfig stable_id_config = 7;
  // Sets default stable id policy for all selection classes.
  StableIdConfig.StableIdType default_stable_id_type = 8;

  // Specifies the TransportArbiter secondary transport freshness.
  optional int32 transport_arbiter_refresh = 9;

  // Defines the minimum and/or maximum needed BMC version for a platform.
  message VersionConfig {
    message Policy {
      SelectionSpec.SelectionClass select = 1;
      // Defines the minimum needed (BMC) version for a platform.
      //(greater than or equal to min_version)
      optional string min_version = 2;
      // Define the maximum needed (BMC) version for a platform.
      // (less than or equal to max_version)
      optional string max_version = 3;
    }
    repeated Policy policies = 1;
  }
  optional VersionConfig version_config = 10;
}
