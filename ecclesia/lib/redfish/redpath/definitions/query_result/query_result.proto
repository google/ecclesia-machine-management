syntax = "proto3";

package ecclesia;

import "google/protobuf/timestamp.proto";
import "ecclesia/lib/redfish/transport/transport_metrics.proto";

message QueryIdToResult {
  // Map of query id to the Query Result
  map<string, QueryResult> results = 1;
}

message QueryResult {
  // Query Id
  string query_id = 1;
  // List of errors encountered for this query
  Status status = 2;
  // Statistics associated with this query
  Statistics stats = 3;
  // Query Result Data
  QueryResultData data = 4;
}

message QueryResultData {
  // Unordered map of dynamically typed values.
  map<string, QueryValue> fields = 1;
}

message QueryValue {
  message RawData {
    oneof value {
      string raw_string_value = 1;  // base64 encoded string
      bytes raw_bytes_value = 2;
    }
  }
  // The kind of value.
  oneof kind {
    int64 int_value = 1;
    // Represents a double value.
    double double_value = 2;
    // Represents a string value.
    string string_value = 3;
    // Represents a boolean value.
    bool bool_value = 4;
    // Represents a timestamp value.
    google.protobuf.Timestamp timestamp_value = 5;
    // Represents a structured value.
    QueryResultData subquery_value = 6;
    // Represents a repeated `Value`.
    ListValue list_value = 7;
    // Represents an identifier.
    Identifier identifier = 8;
    // Represenst raw data value.
    RawData raw_data = 9;
  }
}

message ListValue {
  // Repeated field of dynamically typed values.
  repeated QueryValue values = 1;
}

// Represents a Redfish Location object as defined in the Redfish spec.
message RedfishLocation {
  string service_label = 1;
  optional string part_location_context = 2;
}

message Identifier {
  // Node-level devpath
  optional string local_devpath = 1;
  // Machine-level devpath
  optional string machine_devpath = 2;
  // Sub-Fru location context
  optional string embedded_location_context = 3;
  reserved 4;
  // Redfish Location object as defined in the Redfish spec.
  optional RedfishLocation redfish_location = 5;
}

enum TransportPriority {
  TRANSPORT_PRIORITY_UNKNOWN = 0;
  TRANSPORT_PRIORITY_PRIMARY = 1;
  TRANSPORT_PRIORITY_SECONDARY = 2;
}

message TransportMetrics {
  // Priority of transport used for the query.
  TransportPriority transport_priority = 1;
  // Start time of the query
  google.protobuf.Timestamp start_time = 2;
  // End time of the query
  google.protobuf.Timestamp end_time = 3;
}

message Statistics {
  // Start time of the query
  google.protobuf.Timestamp start_time = 1;
  // End time of the query
  google.protobuf.Timestamp end_time = 2;
  // Count of requests made to the server
  int64 num_requests = 3;
  // Total payload size
  int64 payload_size = 4;
  // Number of cache hits
  int64 num_cache_hits = 5;
  // Number of cache misses
  int64 num_cache_misses = 6;
  // Metrics collected when using MetricalRedfishTransport
  optional RedfishMetrics redfish_metrics = 7;

  // Transport metrics for when there is a primary and secondary transport.
  repeated TransportMetrics transport_metrics = 8;
}

// Codes for errors that may be encountered during redpath query execution.
enum ErrorCode {
  ERROR_NONE = 0;
  // Occurs when the redfish service root cannot be queried. Query execution not
  // attempted.
  ERROR_SERVICE_ROOT_UNREACHABLE = 1;
  // Encapsulates network timeouts during query execution.
  ERROR_NETWORK = 2;
  // Occurs when user is unauthenticated to access any RF resource during the
  // query execution.
  ERROR_UNAUTHENTICATED = 3;
  ERROR_INTERNAL = 4;
  // Occurs when the query execution is aborted due to timeout.
  ERROR_QUERY_TIMEOUT = 5;
  // Occurs when the query execution is aborted due to 503 Service Unavailable.
  ERROR_UNAVAILABLE = 6;
}

message TransportErrorCode {
  // priority of transport used for the query.
  TransportPriority transport_priority = 1;
  // Error code for the query.
  ErrorCode error_code = 2;
}

message Status {
  // List of errors encountered for this query
  repeated string errors = 1;
  // Error code for the query. Will reflect first encountered error.
  ErrorCode error_code = 2;

  // Error code for when there is a primary and secondary transport.
  repeated TransportErrorCode transport_code = 3;
}
