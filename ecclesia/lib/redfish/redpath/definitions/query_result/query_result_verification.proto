// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ecclesia;

import "ecclesia/lib/redfish/redpath/definitions/query_result/query_result.proto";

message Verification {
  enum Presence {
    PRESENCE_UNKNOWN = 0;
    PRESENCE_REQUIRED = 1;
    PRESENCE_OPTIONAL = 2;
  }

  enum Compare {
    COMPARE_UNKNOWN = 0;
    COMPARE_EQUAL = 1;
    COMPARE_NOT_EQUAL = 2;
  }

  message Validation {
    enum Operation {
      OPERATION_UNKNOWN = 0;
      // The following operations are supported only for numeric values.
      OPERATION_GREATER_THAN = 1;
      OPERATION_GREATER_THAN_OR_EQUAL = 2;
      OPERATION_LESS_THAN = 3;
      OPERATION_LESS_THAN_OR_EQUAL = 4;
      OPERATION_PLUS = 5;
      OPERATION_MINUS = 6;
      // The following operations are supported only for string values.
      OPERATION_STRING_CONTAINS = 7;
      OPERATION_STRING_NOT_CONTAINS = 8;
      OPERATION_STRING_STARTS_WITH = 9;
      OPERATION_STRING_NOT_STARTS_WITH = 10;
      OPERATION_STRING_ENDS_WITH = 11;
      OPERATION_STRING_NOT_ENDS_WITH = 12;
      OPERATION_STRING_REGEX_MATCH = 13;
      OPERATION_STRING_NOT_REGEX_MATCH = 14;
    }

    enum Range {
      RANGE_UNKNOWN = 0;
      RANGE_IN = 1;
      RANGE_NOT_IN = 2;
    }

    enum Interval {
      INTERVAL_UNKNOWN = 0;
      INTERVAL_OPEN = 1;
      INTERVAL_CLOSED = 2;
      INTERVAL_OPEN_CLOSED = 3;
      INTERVAL_CLOSED_OPEN = 4;
    }

    oneof operations {
      Operation operation = 1;
      Range range = 2;
      Interval interval = 3;
    }

    // Specify the operands for the verification operation.
    //  - For regular and string operations, no operands are required. They are
    //    ignored if provided.
    //  - For range operations, at least one operand is required.
    //  - For interval operations, at least two operands are required - the
    //  first
    //    operand is the lower bound and the second is the upper bound.
    repeated QueryValue operands = 4;
  }

  // The presence check for the query value.
  Presence presence = 1;
  // The comparison to perform on the query value.
  Compare comparison = 2;
  // Set of validations to perform on the query value.
  repeated Validation validation = 3;
}

message QueryValueVerification {
  // The comparison to perform based on the type of the value.
  oneof kind {
    // Applies to primitive/scalar values.
    Verification verify = 1;
    // Applies to list values.
    ListValueVerification list_compare = 2;
    // Applies to subquery values.
    QueryResultDataVerification data_compare = 3;
  }
}

message ListValueVerification {
  // Optional; if provided, the list values will be verified in the order
  // specified by the identifiers. Note that the list must contain only subquery
  // values. If not provided, the list values are verified in the order they
  // appear in the list.
  repeated string identifiers = 1;
  // The verification to perform on the list values.
  QueryValueVerification verify = 2;
}

message QueryResultDataVerification {
  // Map of Query Field Name to the verification operation.
  map<string, QueryValueVerification> fields = 1;
}

message QueryResultVerification {
  // The query ID to verify. If the query ID don't match with input query
  // results, the verification will fail.
  string query_id = 1;
  // The verification to perform on the query result data.
  QueryResultDataVerification data_verify = 2;
}

message QueryVerificationResult {
  // The error information for a single verification error.
  message ErrorInfo {
    // The error message for the verification error.
    string msg = 1;
    // The path to the QueryResult value that failed verification.
    string path = 2;
    // The corresponding URI of the QueryResult value that failed verification.
    optional string uri = 3;
  }

  // The list of errors encountered during verification.
  repeated ErrorInfo errors = 1;
}
